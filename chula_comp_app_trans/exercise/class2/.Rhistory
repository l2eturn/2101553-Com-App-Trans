# Coerce a logical value to numeric (0 and 1)
c <- FALSE
c <- as.character(c);
# Coerce a logical value to character string
# Try to coerce two non-compatible data types (like a character string to numeric)
as.double("R CODER")
# Create a vector with 4 mangoes and 6 apples
c(mango = 4,apple = 6)
# Use the "setNames" function to name the vector "my_fruit"
my_fruit <- c(4,6,8)
fruit_name <- c('mango','apple')
setNames(my_fruit, fruit_name)
z <- c(12, 15, 3, 22);
# Sort the vector "z" in ascending order with the "sort" function
sort(z);
# Sort the vector "z" in descending order with the "sort" function
sort(z, decreasing = TRUE);
# Sort the vector "z" in ascending order with the "order" function
order(z); #บอก index ของ arr z จากน้อยไปมาก
arr <- c(z[3], z[1], z[2], z[4]);
arr;
# Sort the vector "z" in descending order with the "order" function
order(-z);
arr <- c(z[4], z[2], z[1], z[3]);
arr;
# Reverse the order of the vector "z"
rev(z); # just reverse
x <- c(1, 5)
y <- c(4, 0, 1, 3)
# Check if each element of the vector "x" is contained in the vector "y"
for (i in x)
{
print(i %in% y);
}
# Return the common element(s) between the vector "x" and "y"
x[c(TRUE, FALSE)]
x[x %in% y]
# Check if all the elements of the vector "x" are in the vector "y" with the function "all"
all(x %in% y)
#abb -> abbriviation
my_month <- month.abb
my_month
# Access different data of "my_month"
# First element
my_month[1];
# Third and fourth element
my_month[3:4]
# Fifth and seventh element
my_month[c(3,7)];
# Last element of vector
my_month[length(my_month)];
# Even months
my_month[seq(2,length(my_month),by = 2)]
# Odd months
my_month[seq(1,length(my_month),by = 2)]
my_month <- month.abb
# The maximum monthly temperature of a spanish city in 2017.
Spain_temp <- c(22.52, 18.70, 19.61, 22.79, 29.38, 30.19,
33.16, 36.97, 33.29, 28.98, 24.31, 22.43)
setNames(Spain_temp, my_month)
# Months with maximum temperature greater than 30
my_month[Spain_temp > 30]
# Months with maximum temperature lower than 20 OR greater than 35
my_month[Spain_temp < 30 | Spain_temp > 35]
my_capital <- c("London", "New York", "Paris", NA, "Bangkok")
my_capital
# Deleting 'London' with a "-" sign
my_capital[-1];
# Deleting 'London' with the "which" function
my_capital[-which(my_capital == "London")]
# Remove NA
my_capital[c(!is.na(my_capital))]
# Create the vector of 10 20 30 40 50 60 70 80 90 100 using the "by" argument
seq(10, 100, by = 10);
# Create the vector of 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 using the "length.out" argument
seq(0, 360, lenght.out = 13)
seq(0, 1, lenght.out = 11)
# Create the vector of "female" "male" "female" "male" "female" "male"
rep(c("female","male"),times = 3);
# Create the vector of TRUE TRUE TRUE FALSE FALSE FALSE
c(rep(T, times = 3),rep(F, times = 3))
rep(c(T,F), each = 3);
my_data <- 1:12
# Create 2-column matrix ordered by column
matrix(my_data, nco = 2)
# Create 4-row matrix ordered by column
matrix(my_data, nco = 4)
# Create 3-row matrix ordered by row
matrix(my_data, nrow  = 3, byrow = T)
u <- c(2, 7, 3, 6, 1)
v <- c(3, 7, 3, 5, 9)
# column binding
a <- cbind(u, v)
# row binding
b <- rbind(u, v)
# check the output class
class(b)
# matrix of 'logical' and 'character' data type
matrix(c(TRUE, TRUE, FALSE, TRUE), ncol = 2)
matrix(c("red", "green", "orange", "black"), ncol = 2)
matA <- matrix(c(3, 1, 6, 1, 2, 9), ncol = 2)
matA
# Create matB by adding column c(6, 1, 7) and c(1, 6, 1) to matA
matb <- cbind(matA, c(6,1,7), c(1,6,1));
matb
# Remove first and third column of matB
matb[,c(-1,-3)]; #matrix(col,row)
# Remove second row of matA
matA[-2, ];
matC <- matrix(c(2, 7, 1, 3, 6, 1), ncol = 2, byrow = T)
matD <- matrix(c(3, 7, 6, 3, 5, 9), ncol = 2, byrow = T)
# Stack matrices matC and matD vertically and horizontally
rbind(matC, matD)
cbind(matC, matD)
my_mat <- matrix(1:8, nrow = 2, ncol = 4)
my_mat
# Label rows of my_mat with c("M", "F") and columns with the letters A to D
LETTERS[1:4]
dimnames(my_mat) <- list(c("M","F"), LETTERS[1:4])
my_mat
# Name the row and column variables of my_mat as "Sex" and "Group", respectively
dimnames(my_mat) <- list(sex = c("M","F"), group = LETTERS[1:4])
my_mat
# See the structure of a matrix my_mat
str(my_mat)
# Remove column names of my_mat
colnames(my_mat) <- NULL
my_mat
# Remove both row and column names of my_mat
unname(my_mat)
# You have a vector containing the week days when some event happened.
event_day <- c("Friday", "Tuesday", "Thursday",
"Monday", "Wednesday", "Monday",
"Wednesday", "Monday", "Monday",
"Wednesday", "Sunday", "Saturday")
summary(even_day)
# You have a vector containing the week days when some event happened.
event_day <- c("Friday", "Tuesday", "Thursday",
"Monday", "Wednesday", "Monday",
"Wednesday", "Monday", "Monday",
"Wednesday", "Sunday", "Saturday")
summary(event_day)
# Convert your character vector to factor by preserving the order of the levels as appear on the input data
factor(event_day,level = unique(event_day))
# You have a vector containing the week days when some event happened.
event_day <- c("Friday", "Tuesday", "Thursday",
"Monday", "Wednesday", "Monday",
"Wednesday", "Monday", "Monday",
"Wednesday", "Sunday", "Saturday")
summary(event_day)
# Convert your character vector to factor by preserving the order of the levels as appear on the input data
aa <- factor(event_day,level = unique(event_day))
summary(aa)
# You have a vector containing the week days when some event happened.
event_day <- c("Friday", "Tuesday", "Thursday",
"Monday", "Wednesday", "Monday",
"Wednesday", "Monday", "Monday",
"Wednesday", "Sunday", "Saturday")
summary(event_day)
# Convert your character vector to factor by preserving the order of the levels as appear on the input data
aa <- factor(event_day,level = unique(event_day))
#summary(aa)
# You have a vector containing the week days when some event happened.
event_day <- c("Friday", "Tuesday", "Thursday",
"Monday", "Wednesday", "Monday",
"Wednesday", "Monday", "Monday",
"Wednesday", "Sunday", "Saturday")
summary(event_day)
# Convert your character vector to factor by preserving the order of the levels as appear on the input data
aa <- factor(event_day,level = unique(event_day))
#summary(aa)
# You have a vector containing the week days when some event happened.
event_day <- c("Friday", "Tuesday", "Thursday",
"Monday", "Wednesday", "Monday",
"Wednesday", "Monday", "Monday",
"Wednesday", "Sunday", "Saturday")
summary(event_day)
# Convert your character vector to factor by preserving the order of the levels as appear on the input data
aa <- factor(event_day,level = unique(event_day))
summary(aa)
# You have a vector containing the week days when some event happened.
event_day <- c("Friday", "Tuesday", "Thursday",
"Monday", "Wednesday", "Monday",
"Wednesday", "Monday", "Monday",
"Wednesday", "Sunday", "Saturday")
#summary(event_day)
# Convert your character vector to factor by preserving the order of the levels as appear on the input data
aa <- factor(event_day,level = unique(event_day))
#summary(aa)
table(aa)
# You have the following data stored in a numeric vector
city <- c(3, 2, 1, 4, 3, 2)
# Convert the data into factor and get it categorized for further analysis
factor(city)
# Change factor labels of the levels
city_factor <- factor(city, labels = c("Bangkok","Chiangmai","Songkhla","Khonkean"))
city_factor
# Create a vector with the desired order
my_order <- c("Chiangmai", "Songkhla", "Khonkaen", "Bangkok")
# Indicate the order in the 'levels' argument
factor(city_factor,labels = my_order)
# Create a vector with the desired order
my_order <- c("Chiangmai", "Songkhla", "Khonkaen", "Bangkok")
# Indicate the order in the 'levels' argument
factor(city_factor,labels = my_order)
table(city_factor)
table(city_factor2)
# Create a vector with the desired order
my_order <- c("Chiangmai", "Songkhla", "Khonkaen", "Bangkok")
# Indicate the order in the 'levels' argument
factor(city_factor,labels = my_order)
table(city_factor)
# Create a vector with the desired order
my_order <- c("Chiangmai", "Songkhla", "Khonkaen", "Bangkok")
# Indicate the order in the 'levels' argument
city_factor2 <- factor(city_factor,labels = my_order)
table(city_factor)
table(city_factor2)
# You have the following data stored in a numeric vector
city <- c(3, 2, 1, 4, 3, 2)
# Convert the data into factor and get it categorized for further analysis
#factor(city)
# Change factor labels of the levels
city_factor <- factor(city, labels = c("Bangkok","Chiangmai","Songkhla","Khonkean"))
city_factor
# Create a vector with the desired order
my_order <- c("Chiangmai", "Songkhla", "Khonkaen", "Bangkok")
# Indicate the order in the 'levels' argument
city_factor2 <- factor(city_factor,labels = my_order)
table(city_factor)
table(city_factor2)
barplot(table(city_factor))
barplot(table(city_factor))
# Create a vector with the desired order
my_order <- c("Chiangmai", "Songkhla", "Khonkaen", "Bangkok")
# Indicate the order in the 'levels' argument
city_factor2 <- factor(city_factor,labels = my_order)
table(city_factor)
table(city_factor2)
barplot(table(city_factor))
barplot(table(city_factor2))
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
#set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
#set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
#set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
#set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
#set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
#set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
set.seed(123)
set.seed(123)
set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
city_factor
set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
)
city_factor3 <- reorder(my_df$city, my_df$salary, mean)
city_factor3 <- reorder(my_df$city, my_df$salary, mean)
city_factor3
city_factor3
set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
city_factor4 <- relevel(city_factor3,"khonkaen")
city_factor4
set.seed(123) #ทำให้ผลเหมือนเดิม
my_df <- data.frame(city = city_factor, salary = sample(20:50, 6))
my_df
# Reorder the factor based on the "mean wage" of the individuals using the reorder function
city_factor3 <- reorder(my_df$city, my_df$salary, mean)
city_factor3
levels(city_factor)
# Reverse the order of levels of a factor with the "rev" function
rev(levels(city_factor))
levels(city_factor)
# Reverse the order of levels of a factor with the "rev" function
city_faqctor4 <- rev(levels(city_factor3))
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor4,"khonkaen")
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_faqtor4,"khonkaen")
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor4,"khonkaen")
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor4,"khonkaen")
levels(city_factor)
# Reverse the order of levels of a factor with the "rev" function
city_factor4 <- rev(levels(city_factor3))
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor4,"khonkaen")
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor,"khonkaen")
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor,"Khonkaen")
city_factor
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor,"Khonkean")
# Check all created factors
# Let the level ‘Khonkaen’ appearing first and maintain the order of the others
city_factor5 <- relevel(city_factor,"Khonkean")
city_factor5
# Check all created factors
my_data <- c(0, 2, 0, 5, 1, 9, 9, 4)
my_factor <- factor(my_data)
my_factor
# Correct way!!
as.numeric(levels(my_factor))[my_factor]
# Wrong way!!
as.numeric(my_factor)
knitr::opts_chunk$set(echo = TRUE)
df_data <- data.frame(col1 = 1:10, col2 = 11:20)
df_data
# Check the default row names of my_df
# Set the row names to my_df with a character vector with elements "Row_X"
# Hint: use the "paste" function to concatenate vectors after converting to character.
# Print out "Jan is the 1st month of the year." to "Dec is the 12th month of the year."
View(df_data)
df_data <- data.frame(col1 = 1:10, col2 = 11:20)
df_data
# Check the default row names of my_df
rownames(df_data)
# Set the row names to my_df with a character vector with elements "Row_X"
# Hint: use the "paste" function to concatenate vectors after converting to character.
# Print out "Jan is the 1st month of the year." to "Dec is the 12th month of the year."
df_data <- data.frame(col1 = 1:10, col2 = 11:20)
df_data
# Check the default row names of my_df
rownames(df_data)
# Set the row names to my_df with a character vector with elements "Row_X"
# Hint: use the "paste" function to concatenate vectors after converting to character.
paste("Row_",1:10)
# Print out "Jan is the 1st month of the year." to "Dec is the 12th month of the year."
paste("Row_",1:10,sep = "")
paste("Row_",1:10,sep = '')
df_data <- data.frame(col1 = 1:10, col2 = 11:20)
df_data
# Check the default row names of my_df
rownames(df_data)
# Set the row names to my_df with a character vector with elements "Row_X"
# Hint: use the "paste" function to concatenate vectors after converting to character.
paste("Row_",1:10,sep = '')
# Print out "Jan is the 1st month of the year." to "Dec is the 12th month of the year."
rownames(df_data) <- paste("Row_",1:10,sep = '')
df_data
paste(1:12, c("st","nd","rd",rep("th",9)),sep = '')
aa <- paste(1:12, c("st","nd","rd",rep("th",9)),sep = '')
paste(month.abb,"is the",aa,"month of the year")
colnames(df_data)
colnames(df_data) <- c("Colum_1","Colum_2")
df_data <- cbind(df_data,Colum_3 = 21:30)
df_data
# Remove row names of df_data
rownames <- NULL
View(df_data)
rownames <- NULL
View(my_df)
View(df_data)
View(my_df)
View(df_data)
rownames(df_data) <- NULL
View(my_df)
View(df_data)
data
rownames(df_data) <- NULL
# Remove column names of df_data
colnames(df_data) <- NULL
# Remove row names of df_data
rownames(df_data) <- NULL
# Remove column names of df_data
colnames(df_data) <- NULL
View(df_data)
x
x[1]
x[[1]]
# Access observations out of the bounds
# Single square brackets
x[6]
# Single square brackets = Maintains the name of the element
x[1]
# Double square brackets
x[[6]]
# Single square brackets = Maintains the name of the element
x[1]
x
# Single square brackets = Maintains the name of the element
x[1]
# Double square brackets = Simplified output
x[[1]]
# Single square brackets = Maintains the name of the element
x[1]
# Double square brackets = Simplified output
x[[1]]
# Single square brackets = Maintains the name of the element
x[1]
# Access observations out of the bounds
# Single square brackets
x[6]
# Double square brackets
x[[6]]
x <- c(one = 1, two = 2)
x
# Single square brackets = Maintains the name of the element
x[1]
# Double square brackets = Simplified output
x[[1]]
# Access observations out of the bounds
# Single square brackets
x[6]
# Double square brackets
x[[6]]
x <- c(one = 1, two = 2)
x
# Single square brackets = Maintains the name of the element
x[1]
# Double square brackets = Simplified output
x[[1]]
# Access observations out of the bounds
# Single square brackets
x[6]
# Double square brackets
x[[6]]
x <- c(one = 1, two = 2)
x
# Single square brackets = Maintains the name of the element
x[1]
my_vector[2];
my_vector <- c(15, 21, 17, 25, 12, 51)
my_vector[2];
my_vector[5];
c(rep(my_vector[2]),2)
rep(my_vector[2],2)
# All values except the fourth and fifth
my_vector[c(-4,-5)]
# First, third, fourth and sixth values using boolean indices
my_vector[c(T,F,T,T,F,T)]
# Elements greater than 15
my_vector > 15
# Elements greater than 15
my_vector[my_vector > 15]
# Use the 'subset' function
subset(my_vector, my_vector > 15)
# Use the 'subset' function
subset(my_vector, my_vector > 15 & my_vector < 22)
my_vector[] <- 1
my_vector
