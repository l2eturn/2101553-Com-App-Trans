aa <- addmargins(two_way_table, margin = 2)
aa
aa <- addmargins(aa, margin = 2, FUN = mean)
aa
aa <- addmargins(aa, margin = 1, FUN = mean)
aa <- addmargins(aa, margin = 1, FUN = mean)
aa
aa <- addmargins(two_way_table, margin = 2)
aa <- addmargins(aa, margin = 1, FUN = mean)
aa
# Add margins to a two-way table
addmargins(two_way_table)
# Add 'mean' margins to a two-way table
addmargins(two_way_table, FUN = mean)
# Add only column margins
addmargins(two_way_table, margin = 2)
# Add 'sum' column margins and 'mean'row margins
aa <- addmargins(two_way_table, margin = 2)
aa <- addmargins(aa, margin = 1, FUN = mean)
aa
# Add only column margins
addmargins(two_way_table, margin = 2)
# Add 'sum' column margins and 'mean'row margins
aa <- addmargins(two_way_table, margin = 2)
# Add only column margins
addmargins(two_way_table, margin = 2)
# Add 'mean' margins to a two-way table
addmargins(two_way_table, FUN = mean)
# Add 'mean' margins to a two-way table
addmargins(two_way_table, FUN = mean)
# Add only column margins
addmargins(two_way_table, margin = 2)
# Add 'mean' margins to a two-way table
addmargins(two_way_table, FUN = mean)
# Sample datasets
set.seed(61)
employee_id <- 1:10
employee_id <- 1:10
employee_name <- c("Alice", "Bob", "Charlie", "Daniel", "Emma",
"Frank", "George", "Helen", "Isaac", "Jack")
employee_id <- 1:10
employee_id <- 1:10
employee_name <- c("Alice", "Bob", "Charlie", "Daniel", "Emma",
"Frank", "George", "Helen", "Isaac", "Jack")
employee_id <- 1:10
employee_name <- c("Alice", "Bob", "Charlie", "Daniel", "Emma",
"Frank", "George", "Helen", "Isaac", "Jack")
employee_id <- 1:10
employee_name <- c("Alice", "Bob", "Charlie", "Daniel", "Emma",
"Frank", "George", "Helen", "Isaac", "Jack")
employee_id <- 1:10
employee_name <- c("Alice", "Bob", "Charlie", "Daniel", "Emma",
"Frank", "George", "Helen", "Isaac", "Jack")
employee_id <- 1:10
employee_name <- c("Alice", "Bob", "Charlie", "Daniel", "Emma",
"Frank", "George", "Helen", "Isaac", "Jack")
employee_salary <- sort(round(rnorm(10, mean = 1500, sd = 500)), decreasing = T)
employee_age <- sort(round(rnorm(10, mean = 50, sd = 8)), decreasing = T)
employee_position <- c("CTO", "CFO", "Administrative", rep("Technician", 7))
df_1 <- data.frame(id = employee_id[1:8], name = employee_name[1:8],
month_salary = employee_salary[1:8])
df_2 <- data.frame(id = employee_id[-5], name = employee_name[-5],
age = employee_age[-5], position = employee_position[-5])
df_1
df_2
```{r Merge data frames, warning=FALSE}
set.seed(61)
employee_id <- 1:10
employee_name <- c("Alice", "Bob", "Charlie", "Daniel", "Emma",
"Frank", "George", "Helen", "Isaac", "Jack")
employee_salary <- sort(round(rnorm(10, mean = 1500, sd = 500)), decreasing = T)
employee_age <- sort(round(rnorm(10, mean = 50, sd = 8)), decreasing = T)
employee_position <- c("CTO", "CFO", "Administrative", rep("Technician", 7))
df_1 <- data.frame(id = employee_id[1:8], name = employee_name[1:8],
month_salary = employee_salary[1:8])
df_2 <- data.frame(id = employee_id[-5], name = employee_name[-5],
age = employee_age[-5], position = employee_position[-5])
df_1
df_2
# Inner join df_1 and df_2
merge(x = df_1, y = df_2)
merge(x = df_1, y = df_2, by = c("id", "name")) # Equivalent
View(df_1)
View(df_2)
View(DF)
merge(x = df_1, y = df_2)
merge(x = df_1, y = df_2, by = c("id", "name")) # Equivalent
# Outer join df_1 and df_2
merge(x = df_1, y = df_2, all = TRUE)
# Left join df_1 and df_2
merge(x = df_1, y = df_2, all.x = TRUE)
df_3 <- data.frame(var = c("one", "two", "three", "four", "five"),
data = c(1, 2, 4, 8, 16))
View(df_3)
rownames(df_3) <- c("A", "B", "C", "D", "E")
df_3
df_4 <- data.frame(var = c("three", "one", "eight", "two", "nine"),
data = c(1, 5, 10, 15, 20))
View(df_4)
rownames(df_4) <- c("E", "A", "B", "D", "C")
merge(df_3, df_4, by = 0, all = TRUE)
df_x <- data.frame(id = 1:4,
year = 1995:1998)
df_y <- data.frame(id = c(4, 1, 3),
year = c(1998, 1995, 1997),
age = c(22, 25, 23))
df_z <- data.frame(id = c(1, 2, 3),
year = 1995:1997,
wage = c(1000, 1200, 1600))
df_x
df_y
df_z
merge(df_x, merge(df_y, df_z))
merge(df_x, merge(df_y, df_z, all = TRUE), all = TRUE)
knitr::opts_chunk$set(echo = TRUE)
if(!require(tidyverse)){install.packages("tidyverse")}
library(dplyr)
data(band_instruments)
band_instruments
data(band_instruments)
band_instruments
band_instruments
# Rename the first column 'name' to 'FirstName' and save as 'my_df1'
my_df1 <- rename(band_instruments,"FirstName",1)
band_instruments
# Rename the first column 'name' to 'FirstName' and save as 'my_df1'
my_df1 <- rename(band_instruments,name,1)
# Rename the first column 'name' to 'FirstName' and save as 'my_df1'
my_df1 <- rename(band_instruments,"FirstName"="Name")
# Rename the first column 'name' to 'FirstName' and save as 'my_df1'
my_df1 <- rename(band_instruments,"FirstName"="name")
my_df1
# Rename the second column as 'SecondColumn' and save as 'my_df2'
my_df2 <- rename(my_df1,"SecondColumn" = "plays")
my_df2
band_instruments
my_df2
# Rename the column 'name' as 'Member' and the column 'plays' as 'Instrument'
my_df3 <- rename(my_df2,"FirstName" = "Member","SecondColumn" = "Instrument")
# Rename the column 'name' as 'Member' and the column 'plays' as 'Instrument'
my_df3 <- rename(my_df2,"FirstName" = "Member","SecondColumn" = "Instrument")
# Rename the column 'name' as 'Member' and the column 'plays' as 'Instrument'
my_df3 <- rename(my_df2,"Member" = "FirstName","Instrument" = "SecondColumn")
my_df3
new_names
# Rename 'name' as 'Member name' and 'plays' as 'Instrument' using the following named vector
new_names <- c("MemberName" = "name", "Instrument" = "plays")
new_names
my_df4 <- rename(band_instruments,new_name)
my_df4 <- rename(band_instruments,!!!new_name)
new_names <- c("MemberName" = "name", "Instrument" = "plays")
new_names
my_df4 <- rename(band_instruments,!!!new_name)
my_df4 <- rename(band_instruments,!!!new_name)
# Rename 'name' as 'Member name' and 'plays' as 'Instrument' using the following named vector
new_names <- c("MemberName" = "name", "Instrument" = "plays")
my_df4 <- rename(band_instruments,!!!new_name)
new_names <- c("MemberName" = "name", "Instrument" = "plays")
new_names
my_df4 <- rename(band_instruments,!!!new_names)
my_df4 <- rename(band_instruments,new_names)
my_df4 <- rename(band_instruments,new_names)
my_df4
band_instruments_selected <- rename_with(
band_instruments,
toupper,
.cols = contains("nam")
)
data(women)
women
# Filter the rows where the height column is greater than 68 and save as 'fil_df1'
fil_df1 <- filter(women,geight > 68)
# Filter the rows where the height column is greater than 68 and save as 'fil_df1'
fil_df1 <- filter(women,height > 68)
# Filter the rows where the height column is greater than 68 and save as 'fil_df1'
fil_df1 <- filter(women,height > 68)
fil_df1
women
# Select the rows where the height is equal or lower to the mean of the column and save as 'fil_df2'
mean = mean(women$height)
fil_df2 <- filter(women,height <= mean)
fil_df2
# Select the rows where the height is equal or lower to the mean of the column and save as 'fil_df2'
mean = mean(women$height)
mean
fil_df2
# Filter the rows in which the height column takes the value 65, 70 and 72
fil_df3 <- filter(women,height == c(65,70,72))
fil_df3
women
fil_df3
# Select the opposite of the filtering made on the previous code, and save as 'fil_df4'
fil_df4 <- filter(women,height != c(65,70,72))
fil_df4
# Select the rows that contain a 5 inside the values of 'height', and save as 'fil_df5'
fil_df5 <- filter(women,grepl("5", height))
fil_df5
fil_df4 <- filter(women, !(height %in% c(65, 70, 72)))
fil_df4
fil_df4 <- filter(women,height != c(65,70,72))
fil_df4
fil_df3 <
fil_df3
fil_df3 <- filter(women, (height %in% c(65, 70, 72)))
fil_df3
fil_df3
fil_df4 <- filter(women, !(height %in% c(65, 70, 72)))
fil_df4
women
# Select rows whose values in the height column are greater than 65 and lower than 68, and save as 'fil_df6'
fil_df6 <- filter(women,height > 65 && height < 68)
fil_df6
# Select rows whose values in the height column are greater than 65 and lower than 68, and save as 'fil_df6'
fil_df6 <- filter(women,height > 65 & height < 68)
fil_df6
# Select the rows whose values in height are greater than 65 and whose values in weight are lower or equal to 150
# Then, save the result as 'fil_df7'
fil_df7 <- filter(women,(height > 65 & height < 68 ) & (weight <= 150))
fil_df7
# Filter the rows whose values in height area greater than 65 or whose values in weight are greater or equal to 150
# Then, save the result as 'fil_df8'
fil_df8 <- filter(women,(height >= 65 ) & (weight >= 150))
fil_df8
# Select the first 3 rows
slice(woman,1:3)
data(women)
women
# Select the first 3 rows
slice(woman,1:3)
# Select the first 3 rows
slice(woman,1:3)
# Select the first 3 rows
slice(women,1:3)
women
# Select the first 3 rows
slice(women,1:3)
# Select the first 3 rows with the 'slice_head' function
slice_head(women)
women
# Select the first 3 rows with the 'slice_head' function
slice_head(women,1:3)
# Select the first 3 rows with the 'slice_head' function
slice_head(women,10)
# Select the first 3 rows with the 'slice_head' function
slice_head(women,n = 10)
# Select the last 5 rows with the 'slice_tail' function
slice_tail(womenh,n = 10)
# Select the last 5 rows with the 'slice_tail' function
slice_tail(womenh,n = 5)
# Select the first 3 rows with the 'slice_head' function
slice_head(women,n = 3)
# Select the last 5 rows with the 'slice_tail' function
slice_tail(women,n = 5)
# Select the rows with the top-3 weights
slice_max(women,order_by = weight, n = 3)
# Random select 5 rows with or without replacement
slice_sample(women)
# Random select 5 rows with or without replacement
slice_sample(women, n = 5)
data(starwars)
head(starwars, 10)
data(starwars)
head(starwars, 10)
set.seed(123)
data(starwars)
head(starwars, 10)
set.seed(123)
my_starwars <- starwars[, 1:6] %>%
slice_sample(n = 5)
my_starwars
my_starwars
# Select columns named 'name' and 'height'
select(starwars,name,height)
my_starwars
# Select columns named 'name' and 'height'
aa <- select(starwars,name,height)
aa
my_starwars
sel_df2 <- select(my_starwars, height:skin_color)
sel_df2
# Select the first, the fifth and the sixth column.
sel_df3 <- select(starwars,1,5,6)
sel_df3
drop_df1 <- select(my_starwars, -mass)
drop_df1
# Drop 'height', 'mass' and 'hair_color'
drop_df2 <- select(my_starwars, -mass,-height,-color)
# Drop 'height', 'mass' and 'hair_color'
drop_df2 <- select(my_starwars, -mass,-height,-hair_color)
drop_df2
# Select all columns except the fourth, the fifth and the sixth
drop_df3 <- select(my_starwars,-c(4,5,6))
# Select all columns except the fourth, the fifth and the sixth
drop_df3 <- select(my_starwars,-c(4,5,6))
drop_df3
drop_df3
drop_df4 <- select(my_starwars, !name)
drop_df4
my_starwars
# Select 'name' and all columns containing 'color'
select(my_starwars,contains("color"))
select(my_starwars,all_of(column_names))
my_starwars
# Select 'name' and all columns containing 'color'
select(name,contains("color"))
my_starwars %>% select(all_of(column_names))
another_column_names <- c("mass", "skin_color", "gender", "abc")
my_starwars %>% select(any_of(another_column_names))
knitr::opts_chunk$set(echo = TRUE)
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(palmerpenguins)){install.packages("palmerpenguins")}
if(!require(gapminder)){install.packages("gapminder")}
sample_df <- data.frame(Var1 = sample(1:50, 5), Var2 = sample(1:50, 5))
sample_df
set.seed(8)
sample_df <- data.frame(Var1 = sample(1:50, 5), Var2 = sample(1:50, 5))
sample_df
# Add new column 'Var3' with the sum of 'Var1' and 'Var2'
va3 <- mutate(sample_df,Var3 = Var1+Var2)
va3
# Add new column 'Sqrt_Var1' with the square root of 'Var1'
va4 <- mutate(va3,Sqrt_Var1 = Var1**0.5)
va4
# Create three new columns named 'Var3', 'Var4' and 'Var5'
# where, Var3 = Var1 + Var2;
# Var4 = cumulative sum of 'Var1'
# Var5: if Var1 > Var2, return 'TRUE', else return 'FALSE'
va5 <- mutate(va3,va4 = cumsum(Var1),va5 = Var1 > Var2)
va5
sample_df <- sample_df %>%
mutate(
across(
contains("Var"),        # เลือกทุกคอลัมน์ที่มีคำว่า "Var"
sqrt,                   # ใช้ sqrt()
.names = "{.col}_sqrt"  # ตั้งชื่อใหม่ เช่น Var1_sqrt, Var2_sqrt
)
)
sample_df
sample_df2 <- sample_df %>%
mutate(Var3 = Var1 + Var2)
sample_df2
sample_df2 <- sample_df2 %>%
mutate(
across(
-Var1,
~ paste0("Value: ", .)
)
)
sample_df2
sample_df2 <- sample_df %>%
mutate(Var3 = Var1 + Var2)
sample_df2
sample_df2 <- sample_df2 %>%
mutate(
across(
-Var1,
~ paste0("Value: ", .)
)
)
sample_df2
# From 'sample_df2', create new column 'Var4' with the multiplication of 'Var1' and 'Var2' and add it before 'Var2'
sample_df3 <- mutate(sample_df2,
Var4 = Var1 * Var2,
.before = Var2)
sample_df3 <- mutate(sample_df2,
Var4 = Var1 * Var2,
.before = Var2)
sample_df2
sample_df3 <- mutate(sample_df2,
Var4 = Var1 * Var2,
.before = Var2)
# From 'sample_df2', create new column 'Var4' with the multiplication of 'Var1' and 'Var2' and add it before 'Var2'
sample_df3 <- mutate(sample_df2,Var4 = Var1 *Var2 , .before = Var2)
sample_df4 <- mutate(sample_df3,
Var5 = Var1 + Var3,
.before = 1)
sample_df3 <- mutate(sample_df2,Var4 = Var1 *Var2 , .before = Var2)
# From 'sample_df2', create new column 'Var4' with the multiplication of 'Var1' and 'Var2' and add it before 'Var2'
sample_df3 <- mutate(sample_df2,Var4 = as.numeric(Var1) *as.numeric(Var2), .before = Var2)
sample_df3
sample_df4
sample_df4 <- mutate(sample_df3,
Var5 = Var1 + Var3,
.before = 1)
sample_df4 <- mutate(sample_df3,
Var5 = as.numeric(Var1) + as.numeric(Var3),
.before = 1)
sample_df4
sample_df5 <- mutate(sample_df2,
Var4 = Var1 * Var2,
.keep = "used")
# From 'sample_df2', create new column 'Var4' with the multiplication of 'Var1' and 'Var2'
# Then, use .keep to retain only used columns
sample_df5 <- mutate(sample_df2,
Var4 = as.numeric(Var1)* as.numeric(Var2),
.keep = "used")
sample_df5
sample_df5 <- mutate(sample_df2,
Var4 = as.numeric(Var1)* as.numeric(Var2),
.keep = "unused")
sample_df5
sample_df5 <- mutate(sample_df2,
Var4 = as.numeric(Var1)* as.numeric(Var2),
.keep = "unused")
sample_df5
# From 'sample_df2', create new column 'Var4' with the multiplication of 'Var1' and 'Var2'
# Then, use .keep to retain only used columns
sample_df5 <- mutate(sample_df2,
Var4 = as.numeric(Var1)* as.numeric(Var2),
.keep = "used")
sample_df5
# Keep only the new column and the columns that haven’t been used
sample_df6 <-  mutate(sample_df2,
Var4 = as.numeric(Var1)* as.numeric(Var2),
.keep = "used")
sample_df6
sample_df6 <-  mutate(sample_df2,
Var4 = as.numeric(Var1)* as.numeric(Var2),
.keep = "unused")
sample_df6
set.seed(9)
survey_df <- data.frame(group = sample(c("G1", "G2"), 5, replace = TRUE),
x = sample(1:50, 5),
y = sample(1:50, 5))
survey_df
# Generate a new data frame containing the average of the numerical variables from the original data frame
summarise(survey_df, mean_x = mean(x), mean_y = mean(y))
summarise(survey_df,
min_x = min(x),
max_x = max(x),
min_y = min(y),
max_y = max(y))
set.seed(9)
survey_df2 <- data.frame(group_1 = sample(c("G1", "G2"), 5, replace = TRUE),
group_2 = sample(c("G3", "G4"), 5, replace = TRUE),
x = sample(1:50, 5),
y = sample(1:50, 5))
survey_df2
# Sum of 'x' and sum of 'y' by 'group_1' and 'group_2'
survey_df3 <- group_by(group_1,group_2)
survey_df2
# Sum of 'x' and sum of 'y' by 'group_1' and 'group_2'
survey_df3 <- group_by(group_1)
survey_df2
# Sum of 'x' and sum of 'y' by 'group_1' and 'group_2'
survey_df3 <- group_by(group_1)
# Sum of 'x' and sum of 'y' by 'group_1' and 'group_2'
survey_df %>%  group_by(group) %>% summarise(mean_x = mean(x), mean_y = mean(y))
survey_df2
survey_df
# Sum of 'x' and sum of 'y' by 'group_1' and 'group_2'
survey_df %>%  group_by(group) %>% summarise(mean_x = mean(x), mean_y = mean(y))
survey_df2 %>%
group_by(group_1, group_2) %>%
summarise(sum_x = sum(x), sum_y = sum(y), .groups = "drop")
knitr::opts_chunk$set(echo = TRUE)
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(palmerpenguins)){install.packages("palmerpenguins")}
if(!require(gapminder)){install.packages("gapminder")}
head(penguins)
summary(penguins)
penguin_wide <- penguin_species_island %>%
pivot_wider(names_from = island, values_from = mean_mass)
head(penguins)
summary(penguins)
penguin_wide <- penguin_species_island %>%
pivot_wider(names_from = island, values_from = mean_mass)
# Use group_by and summarise to create a summary table of the average bird weight by species. Note that we have to use na.rm = TRUE because of the presence of NA values in the variable body_mass_g.
penguin_species_island <- penguins %>%
group_by(species, island) %>%
summarise(mean_mass = mean(body_mass_g, na.rm = TRUE), .groups = 'drop')
print(penguin_species_island)
penguin_wide <- penguin_species_island %>%
pivot_wider(names_from = island, values_from = mean_mass)
print(penguin_wide)
penguin_long <- penguin_wide %>%
pivot_longer(
cols = c(Biscoe, Dream, Torgersen),
names_to = "island",
values_to = "mean_mass"
)
print(penguin_long)
head(gapminder)
# Filter for the desired countries and years, then select relevant columns
gapminder_filtered <- gapminder %>%
filter(
country %in% c("Canada", "United States", "Mexico"),
year > 1980
) %>%
select(year, country, gdpPercap)
# Pivot to the desired wide format
gdp_table <- gapminder_filtered %>%
pivot_wider(names_from = country, values_from = gdpPercap)
# View the final table
print(gdp_table)
head(who)
my_friends <- c("Ann", "Bob", "Carol", "Dan", "Eve", "Frank", "George", "Hank")
friend_ages <- c(27, 35, 25, 29, 32, 26, 28, 31)
print(friend_ages)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
# ข้อมูลเริ่มต้น
my_friends <- c("Ann", "Bob", "Carol", "Dan", "Eve", "Frank", "George", "Hank")
friend_ages <- c(27, 35, 25, 29, 32, 26,31)
friend_ages
#Step 2: ทำให้แต่ละ element ใน vector ชื่อ friend_ages มี label กำกับเป็นชื่อของเพื่อแต่ละคน (0.5 คะแนน)
names(friend_ages) <- my_friends
friend_ages <- c(27, 35, 25, 29, 32, 26, 28,31)
friend_ages
#Step 2: ทำให้แต่ละ element ใน vector ชื่อ friend_ages มี label กำกับเป็นชื่อของเพื่อแต่ละคน (0.5 คะแนน)
names(friend_ages) <- my_friends
print(friend_ages)
