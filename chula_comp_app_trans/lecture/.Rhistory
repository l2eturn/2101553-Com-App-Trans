play_data[-2,]
# Delete the 5th to 7th rows
play_data[-c(5:7),]
# Delete the data with first name "James"
play_data2 <- play_data %>% filter(First_Name != "James")
View(play_data2)
# Delete the data with first name "James" and all "fifth" day
play_data3 <- play_data2 %>% filter(Day != "Fifth")
View(play_data3)
# Use the `na.omit()` function
play_data4 <- na.omit(play_data)
View(play_data4)
mean(play_data$RT)
mean(play_data4$RT)
# Use the `drop_na()` function in the  package `tidyr`
play_data5 <- play_data %>% drop_na()
View(play_data5)
mean(play_data5$RT)
# To remove all data with NA
new.student.data <- student.data %>% drop_na()
# Create test data
student.data <- data.frame(student = c("Ben","Jena","Jay","Lek","Bruce"),
gender = c("M","F","F",NA,"M"),
score1 = c(10,20,NA,40,50),
score2 = c(25,NA,10,20,17),
score3 = c(6,4,-99999,5,7))
student.data$score3[student.data$score3 == -99999] <- NA
student.data
# To remove all data with NA
new.student.data <- student.data %>% drop_na()
# To remove all data with NA
new.student.data <- student.data %>% drop_na()
# Use the `complete.cases` function
student.data1 <- student.data[complete.case(student.data),]
# Use the `complete.cases` function
complete.cases(student.data)
student.data2 <-
# Check only "score1","score2" and "score3"
student.data3 <-
student.data4 <-
# To replace NA with the mean of known data
which(is.na(student.data$score1))
student.data1 <- student.data[complete.case(student.data),]
student.data1 <- student.data[complete.cases(student.data),]
View(student.data1)
student.data2 <- student.data[!complete.cases(student.data),]
View(student.data2)
# Check only "score1","score2" and "score3"
student.data3 <- student.data1 <- student.data[complete.cases(student.data[c(3,4,5)]),]
View(student.data3)
# Check only "score1","score2" and "score3"
student.data3 <-student.data[complete.cases(student.data[c(3,4,5)]),]
View(student.data3)
# Check only "score1","score2" and "score3"
student.data3 <-student.data[complete.cases(student.data[,c(3,4,5)]),]
student.data4 <-
# To replace NA with the mean of known data
which(is.na(student.data$score1))
student.data4 <-
# To replace NA with the mean of known data
which(is.na(student.data$score1))
student.data4 <-
# To replace NA with the mean of known data
a = which(is.na(student.data$score1))
student.data4 <-
# To replace NA with the mean of known data
a <-  which(is.na(student.data$score1))
a
is.na(student.data$score1)
student.data
mean(student.data$scor1)
mean(student.data$scor1, na.rm = T)
student.data$score1[which(is.na(student.data$score1))] <- mean(studen.data$score1)
student.data$score1[which(is.na(student.data$score1))] <- mean(student.data$score1)
student.data
student.data$score1[which(is.na(student.data$score1))] <- mean(student.data$score1)
student.data$score1
student.data$score1[which(is.na(student.data$score1))] <- mean(student.data$score1, na.r, = T)
studen.data
student.data
student.data$score1[which(is.na(student.data$score1))] <- mean(student.data$score1, na.rm = T)
student.data
# Creating a data frame
example_df <- data.frame(FName = c('Steve', 'Steve', 'Erica', 'John', 'Brody', 'Lisa', 'Lisa', 'Jens'),
LName = c('Johnson', 'Johnson', 'Ericson','Peterson', 'Stephenson', 'Bond', 'Bond','Gustafsson'),
Age = c(34, 34, 40, 44, 44, 51, 51, 50),
Gender = c('M', 'M', 'F', 'M', 'M', 'F', 'F', 'M'),
Gender = c('M', 'M', 'F', 'M', 'M', 'F', 'F', 'M'))
View(student.data3)
View(TopMovies)
# Creating a data frame
example_df <- data.frame(FName = c('Steve', 'Steve', 'Erica', 'John', 'Brody', 'Lisa', 'Lisa', 'Jens'),
LName = c('Johnson', 'Johnson', 'Ericson','Peterson', 'Stephenson', 'Bond', 'Bond','Gustafsson'),
Age = c(34, 34, 40, 44, 44, 51, 51, 50),
Gender = c('M', 'M', 'F', 'M', 'M', 'F', 'F', 'M'),
Gender = c('M', 'M', 'F', 'M', 'M', 'F', 'F', 'M'))
View(example_df)
# Remove duplicated rows from data frame
duplicated(example_df)
# Remove duplicated rows from data frame
!duplicated(example_df)
example_df.un <- example_df.un(!duplicated(example_df))
example_df.un <- example_df.un(!duplicated(example_df),)
example_df.un <- example_df[!duplicated(example_df),]
example_df. un
example_df.un
# Remove duplicate rows using the unique() function
examp_df <- unique(example_df)
examp_df
# Drop duplicated columns
ex_df.un <-
# Drop duplicates with the distinct() function
ex_df.remove <- distinct(example_df)
ex_df.remove
# Drop duplicated columns
ex_df.un <-
# Drop duplicates with the distinct() function
ex_df.remove <- distinct(example_df,row = "age")
ex_df.remove
# Drop duplicated columns
ex_df.un <-
# Drop duplicates with the distinct() function
ex_df.remove <- examp_df %>% distinct(age)
# Drop duplicated columns
ex_df.un <-
# Drop duplicates with the distinct() function
ex_df.remove <- examp_df %>% distinct(Age)
# Drop duplicated columns
ex_df.un <-
# Drop duplicates with the distinct() function
ex_df.remove <- examp_df %>% distinct(Age, .keep_all = T)
# Drop duplicated columns
ex_df.un <-
# Drop duplicates with the distinct() function
ex_df.remove <- examp_df %>% distinct(Age, .keep_all = T)
ex_df.remove
# Read CSV file "RenSteve.csv" with `read_csv`
#ClassData <- read.csv("C:/Users/Terxzera/Desktop/CUCE_CAT/chula_comp_app_trans/lecture/Data/RenSteve.csv")
ClassData <- read_csv("./Data/RenSteve.csv")
library(readr)
# Read CSV file "RenSteve.csv" with `read_csv`
#ClassData <- read.csv("C:/Users/Terxzera/Desktop/CUCE_CAT/chula_comp_app_trans/lecture/Data/RenSteve.csv")
ClassData <- read_csv("./Data/RenSteve.csv")
View(ClassData)
df <- data.frame("Age" = c(21, 22, 20, 19, 18, 23),
"Names" = c("Andreas", "George", "Steve", "Sarah", "Joanna", "Hanna"))
str(df)
```{r Write data frame to Excel file}
str(df)
# Read Excel file "play_data.xlsx" with "read_excel"
play_data <- read_excel("./Data/play_data.xlsx")
# Read Excel file "play_data.xlsx" with "read_excel"
play_data <- read_excel("./Data/play_data.xlsx")
# Read Excel file "play_data.xlsx" with "read_excel"
library(readxl)
play_data <- read_excel("./Data/play_data.xlsx")
library(readxl)
play_data <- read_excel("./Data/play_data.xlsx")
play_data
View(play_data)
# Delete the 5th to 7th rows
play_data[-c(4:7),]
play_data
View(play_data)
na.omit(play_data)
play_data4 <- na.omit(play_data)
play_data4
View(play_data4)
student.data$score3 == -99999
student.data <- data.frame(student = c("Ben","Jena","Jay","Lek","Bruce"),
gender = c("M","F","F",NA,"M"),
score1 = c(10,20,NA,40,50),
score2 = c(25,NA,10,20,17),
score3 = c(6,4,-99999,5,7))
student.data$score3 == -99999
complete.cases(student.data),
complete.cases(student.data)
View(student.data)
!duplicated(example_df)
example_df <- data.frame(FName = c('Steve', 'Steve', 'Erica', 'John', 'Brody', 'Lisa', 'Lisa', 'Jens'),
LName = c('Johnson', 'Johnson', 'Ericson','Peterson', 'Stephenson', 'Bond', 'Bond','Gustafsson'),
Age = c(34, 34, 40, 44, 44, 51, 51, 50),
Gender = c('M', 'M', 'F', 'M', 'M', 'F', 'F', 'M'),
Gender = c('M', 'M', 'F', 'M', 'M', 'F', 'F', 'M'))
!duplicated(example_df)
knitr::opts_chunk$set(echo = TRUE)
# Call required packages, ex. "readxl", "tidyverse"
if(!require(readxl)){install.packages("readxl")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(rcompanion)){install.packages("rcompanion")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(Hmisc)){install.packages("Hmisc")}
if(!require(corrplot)){install.packages("corrplot")}
if(!require(formatR)){install.packages("formatR")}
diamonds
diamonds
data(diamonds)
diamonds
View(diamonds)
data(diamonds)
knitr::opts_chunk$set(echo = TRUE)
# Call required packages, ex. "readxl", "tidyverse"
if(!require(readxl)){install.packages("readxl")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(rcompanion)){install.packages("rcompanion")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(Hmisc)){install.packages("Hmisc")}
if(!require(corrplot)){install.packages("corrplot")}
if(!require(formatR)){install.packages("formatR")}
# Plot full data (geom = geometric) RGB = 256*256*256 0~F
ggplot(diamonds, aes(x, y)) + geom_point(color = "#000000")
#geom = geometric
# Pull out outliers
filter(diamonds, x == 0 | y == 0)
# Provide multiple arguments to filter() and plot the result
diamonds_ok <- diamonds() %>% filter((x > 0 || y > 0 )) %% filter(y < 20)
# Provide multiple arguments to filter() and plot the result
diamonds_ok <- diamonds() %>% filter((x > 0 || y > 0 )) %% filter(y < 20)
# Provide multiple arguments to filter() and plot the result
diamonds_ok <- diamonds %>% filter((x > 0 || y > 0 )) %% filter(y < 20)
# Provide multiple arguments to filter() and plot the result
diamonds_ok <- diamonds %>% filter(x > 0 | y > 0 ) %% filter(y < 20)
# Provide multiple arguments to filter() and plot the result
diamonds_ok <- diamonds %>% filter(x > 0 | y > 0 ) %>% filter(y < 20)
# Provide multiple arguments to filter() and plot the result
diamonds_ok <- diamonds %>% filter(x > 0 | y > 0 ) %>% filter(y < 20)
diamonds_ok
ggplot(diamonds_ok,aes(x,y))
ggplot(diamonds_ok,aes(x,y)) + geom_point(color = "blue")
# Plot full data (geom = geometric) RGB = 256*256*256 0~F
ggplot(diamonds, aes(x, y)) + geom_point(color = "#000000")
ggplot(diamonds_ok, aes(x, y)) +
geom_point() +
geom_abline(slope = 1, color = "blue", linewidth = 1, alpha = 0.5)
ggplot(diamonds_ok,aes(x,y)) + geom_point(color = "blue")
geom_abline(slope = 1, color = "blue", linewidth = 1, alpha = 0.5)
ggplot(diamonds_ok,aes(x,y)) + geom_point(color = "blue") + geom_abline(slope = 1, color = "blue", linewidth = 1, alpha = 0.5)
ggplot(diamonds_ok,aes(x,y)) + geom_point(color = "black") + geom_abline(slope = 1, color = "blue", linewidth = 1, alpha = 0.5)
View(diamonds_ok)
View(diamonds)
ggplot(diamonds_ok,aes(x,y)) + geom_point(color = "red") + geom_abline(slope = 1, color = "blue", linewidth = 1, alpha = 0.5)
ggplot(diamonds_ok,aes(x,y)) + geom_point(color = "blue") + geom_abline(slope = 1, color = "red", linewidth = 1, alpha = 0.5)
# Practice your filtering skills
# (1) Finding all the diamonds with equal x and y dimensions.
diamonds_1 <- filter(x == y)
# Practice your filtering skills
# (1) Finding all the diamonds with equal x and y dimensions.
diamonds_1 <- filter(diamonds,x == y)
# Practice your filtering skills
# (1) Finding all the diamonds with equal x and y dimensions.
diamonds_1 <- filter(diamonds,x == y)
diamonds_1
ggplot(diamonds_1,aes(x,y))
ggplot(diamonds_1,aes(x,y)) + geom_point(color = "blue")
# (2) A depth between 55 and 70.
ggplot(filter(diamonds,dept >= 55 & dept <= 70)) + geom_point(color = "red")
# (2) A depth between 55 and 70.
ggplot(filter(diamonds,aes(dept),dept >= 55 & dept <= 70)) + geom_point(color = "red")
# (2) A depth between 55 and 70.
ggplot(filter(diamonds,aes(carat,dept),dept >= 55 & dept <= 70)) + geom_point(color = "red")
# (2) A depth between 55 and 70.
ggplot(filter(diamonds,dept >= 55 & dept <= 70),aes(carat,dept)) + geom_point(color = "red")
# (2) A depth between 55 and 70.
ggplot(filter(diamonds,dept >= 55 & dept <= 70),aes(x,y)) + geom_point(color = "red")
# (2) A depth between 55 and 70.
ggplot(filter(diamonds,depth >= 55 & depth <= 70),aes(carat,depth)) + geom_point(color = "red")
# (3) A carat smaller than the median carat.
med = median(diamonds["carat"])
# (3) A carat smaller than the median carat.
med = median(diamonds(carats))
# (3) A carat smaller than the median carat.
med = median(diamonds$carat)
med
# (2) A depth between 55 and 70.
ggplot(filter(diamonds,depth >= 55 & depth <= 70),aes(depth,x)) + geom_point(color = "red")
ggplot(diamonds_2,aes(carat,x)) + geom_point(color = "red")
diamonds_2 <- filter(diamonds,carat < med)
ggplot(diamonds_2,aes(carat,x)) + geom_point(color = "red")
# Create new variables, sym and size
diamonds_ok2 <- mutate(diamonds_ok,
sym = x - y,
diag = sqrt(x^2 + y^2))
diamonds_ok2
diamonds_ok2
# Create new variables, sym and size
diamonds_ok2 <- mutate(diamonds_ok,
sym = x - y,
diag = sqrt(x^2 + y^2))
data(diamonds)
diamonds_ok
# Provide multiple arguments to filter() and plot the result
diamonds_ok <- diamonds %>% filter(x > 0 | y > 0 ) %>% filter(y < 20)
diamonds_ok
# Create new variables, sym and size
diamonds_ok2 <- mutate(diamonds_ok,
sym = x - y,
diag = sqrt(x^2 + y^2))
diamonds_ok2
View(diamonds_ok2)
diamonds_ok2 <- mutate(diamonds_ok2,sys = abs(x-y), diag = sqrt(x^2 + y^2))
diamonds_ok2
# Filter out the outliers
diamonds_ok3 <- filter(diamonds_ok2, abs(sym) < 0.2)
ggplot(diamonds_ok3, aes(diag, sym)) + stat_bin2d()
# Plot the histogram of sym
ggplot(diamonds_ok3, aes(abs(sym))) + geom_histogram(binwidth = 0.01)
# Practice your variable creation skills
# (1) The approximate volume of the diamond (using x, y, and z).
volumes = diamonds$x * diamonds$z * diamonds$y
volumes
diamonds_4 <- mutate(diamonds,volumes = x*y*z)
diamonds_4
# (2) The approximate density of the diamond.
#rho m/v
diamonds_5 <- mutate(diamonds,volumes = carat/volumes)
diamonds_5
# (2) The approximate density of the diamond.
#rho m/v
diamonds_5 <- mutate(diamonds,density = carat/volumes)
diamonds_5
# (3) The price per carat.
diamonds_6 <- mutate(diamonds,price/carat = price/carat)
# (3) The price per carat.
diamonds_6 <- mutate(diamonds,price//carat = price/carat)
# (3) The price per carat.
diamonds_6 <- mutate(diamonds,price per carat = price/carat)
# (3) The price per carat.
diamonds_6 <- mutate(diamonds,price_per_carat = price/carat)
diamonds_6
# Plot the scatter plot between carat and price
ggplot(diamonds_6,aes(price_per_carat,volumes)) + scatter.smooth()
# Plot the scatter plot between carat and price
ggplot(diamonds_6,aes(price_per_carat,volumes)) + geom_point(color = "blue")
# Plot the scatter plot between carat and price
ggplot(diamonds_6,aes(volumes,price_per_carat)) + geom_point(color = "blue")
# Plot the scatter plot between carat and price
ggplot(diamonds_6,aes(price_per_carat,volumes)) + geom_point(color = "blue")
#geom_abline --> y = ax + b
#alpha ความโปร่งแสง
diamonds_ok <- filter(diamonds, x > 0, y > 0, y < 20)
# Determine the number of groups of clarity in the diamonds dataset
summarise(diamonds_ok,n_cut = n(cut) , n_clarity = n(clarity), n_color = n(color))
diamonds_ok
summarise(diamonds_ok,n_cut = n(cut) , n_clarity = n(clarity), n_color = n(color))
summarise(diamonds_ok,n_cut = n_distinct(cut), n_clarity = n(clarity), n_color = n(color))
summarise(diamonds_ok,n_cut = n(cut), n_clarity = n(clarity), n_color = n(color))
summarise(diamonds_ok,n_cut = n(cut), n_clarity = n(clarity), n_color = n(color))
summarise(diamonds_ok,n_cut = n(cut), n_clarity = n(clarity), n_color = n(color))
rlang::last_trace()
summarise(diamonds,n_cut = n(cut), n_clarity = n(clarity), n_color = n(color))
summarise(diamonds_ok,n_cutt = n(cut), n_clarity = n(clarity), n_color = n(color))
# Determine the number of groups of clarity in the diamonds dataset
summarise(diamonds_ok,n_clarity = n(clarity), n_color = n(color))
# Determine the number of groups of clarity in the diamonds dataset
summarise(diamonds, n_big = sum(carat >= 4), prop_cheap = mean(price < 1000))
diamonds_ok %>% group_by(cut) %>% summarise(num = n())
diamonds_ok %>% group_by(cut) %>% summarise(num = n(),price_by_cut = mean())
diamonds_ok %>% group_by(cut) %>% summarise(num = n(),price_by_cut = mean(cut))
diamonds_ok %>% group_by(cut) %>% summarise(num = n(),price_by_cut = mean(price))
diamonds_ok %>% group_by(cut) %>% summarise(num = n(),price_by_cut = mean(price/carat))
# Include the number of observations in each group, and the upper and lower quartiles in the average price
diamonds_ok %>% group_by(cut) %>% summarise(num = n(), avgprice_carat = mean(price/carat))
# Include the number of observations in each group, and the upper and lower quartiles in the average price
diamonds_ok %>% group_by(cut) %>% summarise(num = n(), avgprice_carat = mean(price/carat), Q1 = quartile(price, 0.25))
# Include the number of observations in each group, and the upper and lower quartiles in the average price
diamonds_ok %>% group_by(cut) %>% summarise(num = n(), avgprice_carat = mean(price/carat), Q1 = quartile(price, 0.25))
# Include the number of observations in each group, and the upper and lower quartiles in the average price
diamonds_ok %>% group_by(cut) %>% summarise(num = n(), avgprice_carat = mean(price/carat))
# Include the number of observations in each group, and the upper and lower quartiles in the average price
diamonds_ok %>% group_by(cut) %>% summarise(num = n(),
avgprice_carat = mean(price/carat),
Q1 = quarter(price,1))
# Include the number of observations in each group, and the upper and lower quartiles in the average price
diamonds_ok %>% group_by(cut) %>% summarise(num = n(),
avgprice_carat = mean(price/carat),
Q1 = quantile(price,0.25))
ggplot(by_clarity, aes(clarity, mean)) +
geom_linerange(aes(ymin = lq, ymax = uq)) +
geom_line(aes(group = 1), colour = "grey50") +
geom_point(aes(size = n))
# Print out by_clarity
by_clarity
# Print out by_clarity
by_clarity
# Print out by_clarity
by_cut
ggplot(by_clarity, aes(clarity, mean)) +
geom_linerange(aes(ymin = lq, ymax = uq)) +
geom_line(aes(group = 1), colour = "grey50") +
geom_point(aes(size = n))
# Print out by_clarity
by_clarity
# Include the number of observations in each group, and the upper and lower quartiles in the average price
by_clarity <- diamonds_ok %>% group_by(cut) %>% summarise(num = n(),
avgprice_carat = mean(price/carat),
Q1 = quantile(price,0.25))
# Print out by_clarity
by_clarity
# Plot by_clarity
ggplot(by_clarity, aes(clarity, mean)) +
geom_linerange(aes(ymin = lq, ymax = uq)) +
geom_line(aes(group = 1), colour = "grey50") +
geom_point(aes(size = n))
knitr::opts_chunk$set(echo = TRUE)
# Call required packages, ex. "readxl", "tidyverse"
if(!require(readxl)){install.packages("readxl")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(rcompanion)){install.packages("rcompanion")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(Hmisc)){install.packages("Hmisc")}
if(!require(corrplot)){install.packages("corrplot")}
if(!require(formatR)){install.packages("formatR")}
# Read CSV file with `read_csv`
unemp_wide <- read_csv("./Data/unemployment.csv", show_col_types = FALSE)
# Change from wide to long format (Cartesian to Indexed)
unemp_long <- gather(unemp_wide, key = "year", value = "unemp", `2006`:`2015`)
# Alternatively, we could gather all columns except month
# Then, arrange by month and remove NA
unemp_long2 <-
unemp_long2
# Read CSV file with `read_csv`
unemp_wide <- read_csv("./Data/unemployment.csv", show_col_types = FALSE)
# Read CSV file with `read_csv`
unemp_wide <- read_csv("./Data/unemployment.csv", show_col_types = FALSE)
unemp_wide
unemp_long <- gather(unemp_wide, key = "year", value = "unemp", `2006`:`2015`)
unemp_long
unemp_wide
# Alternatively, we could gather all columns except month
# Then, arrange by month and remove NA
unemp_long2 <- na.omit(unemp_long)
unemp_long2
unemp_long
unemp_long2
unemp_long2 <- na.omit(unemp_long) %>% gather(unemp_wide, key = "year", value = "unemp", -"month", "2006":"2015")
unemp_long2 <- na.omit(unemp_long) %>% gather(unemp_wide, key = "year", value = "unemp", -"month")
gather(unemp_wide, key = "year", value = "unemp", -"month")
unemp_long2
unemp_long2 <- gather(unemp_wide, key = "year", value = "unemp", -"month") %>% na.omit(unemp_long)
unemp_long2
gather(unemp_wide, key = "year", value = "unemp", -"month")
# Alternatively, we could gather all columns except month
# Then, arrange by month and remove NA
unemp_long2 <- gather(unemp_wide, key = "year", value = "unemp", -"month") %>% na.omit(unemp_long) %>% arrange("month")
unemp_long2 <- gather(unemp_wide, key = "year", value = "unemp", -"month") %>% na.omit(unemp_long) %>% arrange("month")
unemp_long2
unemp_long3 <- pivot_longer(unemp_wide, names_to = "year", values_to = "unemp", `2006`:`2015`)
unemp_long3
weather_long <- dplyr::tibble(
day = rep(1:3, 2),
obs = rep(c("temp", "rain"), each = 3),
val = c(c(23, 22, 20), c(0, 0, 5))
)
weather_long
weather_long
# Change from long to wide format (Indexed to Cartesian)
weather_wide <- spread(weather_long, key = "obs",value ="val" )
# Change from long to wide format (Indexed to Cartesian)
weather_wide <- spread(weather_long, key = "obs",value ="val" )
weather_wide
weather_wide
# Print out trt
trt <- separate(trt, "var", c("time","treatment"), "_")
trt <- dplyr::tibble(
var = paste0(rep(c("beg", "end"), each = 3), "_", rep(c("a", "b", "c"))),
val = c(1, 4, 2, 10, 5, 11)
)
# Print out trt
trt <- separate(trt, "var", c("time","treatment"), "_")
# Print out trt
trt <- separate(trt, "var", c("time","treatment"), "_")
# Print out trt
trt <- separate(trt, "var", c("time","treatment"), "_")
trt
trt
trt <- dplyr::tibble(
var = paste0(rep(c("beg", "end"), each = 3), "_", rep(c("a", "b", "c"))),
val = c(1, 4, 2, 10, 5, 11)
)
trt
trt2 <-  separate(trt, "var", c("time","treatment"), "_")
trt2
trt
trt2 <-  separate(trt, "var", c("time","treatment"), "_")
trt2
trt
trt <- dplyr::tibble(
var = paste0(rep(c("beg", "end"), each = 3), "_", rep(c("a", "b", "c"))),
val = c(1, 4, 2, 10, 5, 11)
)
trt
trt2 <-  separate(trt, "var", c("time","treatment"), "_")
trt2
trt2
View(trt)
# Spread with pivot_wider
trt3 <- spread(trt2,"time","val"
# Spread with pivot_wider
trt3 <- spread(trt2,"time","val")
trt3 <- spread(trt2,"time","val")
trt3
View(trt2)
View(trt3)
View(trt2)
View(trt3)
View(trt2)
View(trt3)
View(trt2)
View(trt3)
View(trt2)
View(trt3)
View(trt2)
