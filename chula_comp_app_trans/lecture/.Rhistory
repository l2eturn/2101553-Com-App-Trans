# Convert the character vector sex_vector to a factor with factor() and assign the result to factor_sex_vector
sex_vector <- c("Male","Female","Female","Male","Male")
# Convert the character vector sex_vector to a factor with factor() and assign the result to factor_sex_vector
sex_vector <- c("Male","Female","Female","Male","Male")
summary(sex_vector)
factor_sex_vector <- factor(sex_vector)
summary(factor_sex_vector)
# Print out factor_sex_vector and assert that R prints out the factor levels below the actual values.
factor_sex_vector
summary(factor_sex_vector)
# Print out factor_sex_vector and assert that R prints out the factor levels below the actual values.
factor_sex_vector
# Animals
animals_vector <- c("Elephant", "Giraffe", "Donkey", "Horse")
factor_animals_vector <- factor(animals_vector)
factor_animals_vector
summary(factor_sex_vector)
summary(factor_animals_vector)
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE)
factor_temperature_vector
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE,levels = c("Low", "Medium", "High"))
factor_temperature_vector
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector,levels = c("Low", "Medium", "High"))
factor_temperature_vector
temperature_vector <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE,levels = c("Low", "Medium", "High"))
levels(factor_temperature_vector) <- c('L','M','H')
factor_temperature_vector
"F", "M", "M")
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey <- factor(survey_vector)
levels(factor_survey) <- c("Female","Male")
factor_survey
summary(factor_survey)
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey <- factor(survey_vector,levels = c("M","F"))
levels(factor_survey) <- c("Male","Female")
summary(factor_survey)
factor_speed_vector
factor_speed_vector <- factor(speed_vector, order = T, levels = c("slow","medium","fast"))
# Create speed_vector
speed_vector <- c("medium","slow","slow","medium","fast")
# From speed_vector, create an ordered factor vector: factor_speed_vector. Set ordered to TRUE, and set levels to c("slow", "medium", "fast").
factor_speed_vector <- factor(speed_vector, order = T, levels = c("slow","medium","fast"))
factor_speed_vector
# Print and summarize factor_speed_vector
# Check if da2 (the factor value for the second data analyst) is greater than da5 (the factor value for the fifth data analyst)
# Create speed_vector
speed_vector <- c("medium","slow","slow","medium","fast")
# From speed_vector, create an ordered factor vector: factor_speed_vector. Set ordered to TRUE, and set levels to c("slow", "medium", "fast").
factor_speed_vector <- factor(speed_vector, order = T, levels = c("slow","medium","fast"))
factor_speed_vector
# Print and summarize factor_speed_vector
# Check if da2 (the factor value for the second data analyst) is greater than da5 (the factor value for the fifth data analyst)
# Print out built-in R data frame
mtcars
# Call head() on the mtcars dataset to have a look at the header and the first observations.
# Investigate the structure of mtcars. Make sure that you see the same numbers, variables and data types as mentioned above.
# Definition of vectors
name <- c("Mercury", "Venus", "Earth",
"Mars", "Jupiter", "Saturn",
"Uranus", "Neptune")
type <- c("Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet", "Gas giant",
"Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532,
11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03,
0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Use the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.
# Use str() to investigate the structure of the new planets_df variable.
# From planets_df, select the diameter of Mercury (the value at the first row and the third column).
# From planets_df, select all data on Mars (the fourth row).
# Select and print out the first 5 values in the "diameter" column of planets_df.
# Use the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.
# Select the name column of all planets that have rings.
# Select all columns for planets with rings
# Use subset() on planets_df to select planets that have a diameter smaller than Earth.
# Sort a in an decreasing order
a <- c(100, 10, 1000)
# Call order() on planets_df$diameter (the diameter column of planets_df). Store the result as size.
# Now reshuffle planets_df with the positions vector as row indexes inside square brackets. Keep all columns.
# Vector with numerics from 1 up to 10
my_vector <- 1:10
# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
# Construct list with these different elements:
# Print out my_list
# Add names to the components. Use for my_vector the name vec, for my_matrix the name mat and for my_df the name df.
# Print out my_list
# The variables mov, act and rev in your R workspace
mov <- "The Shining"
act <- c("Jack Nicholson","Shelley Duvall","Danny Lloyd","Scatman Crothers","Barry Nelson")
rev <- data.frame(scores=c(4.5,4.0,5.0), sources=c("IMDb1","IMDb2","IMDb3"),
comments=c("Best Horror Film I Have Ever Seen",
"A truly brilliant and scary film from Stanley Kubrick",
"A masterpiece of psychological horror"))
# Finish the code to build shining_list. Do not forget to name the list components accordingly (names are moviename, actors and reviews).
# Print out shining_list
# Select from shining_list the vector representing the actors.
# Select from shining_list the second element in the vector representing the actors.
factor_speed_vector
# Print and summarize factor_speed_vector
summary(factor_speed_vector)
# Print out built-in R data frame
mtcars
# Call head() on the mtcars dataset to have a look at the header and the first observations.
head(mtcars)
# Print out built-in R data frame
mtcars
# Call head() on the mtcars dataset to have a look at the header and the first observations.
head(mtcars)
tail(mtcars)
# Investigate the structure of mtcars. Make sure that you see the same numbers, variables and data types as mentioned above.
str(mtcars)
```{r Creating a data frame}
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Use the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.
planets_df <- data.frame(name,type,diameter,rotation,rings)
# Definition of vectors
name <- c("Mercury", "Venus", "Earth",
"Mars", "Jupiter", "Saturn",
"Uranus", "Neptune")
type <- c("Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet", "Gas giant",
"Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532,
11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03,
0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Use the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.
planets_df <- data.frame(name,type,diameter,rotation,rings)
# Use str() to investigate the structure of the new planets_df variable.
# From planets_df, select the diameter of Mercury (the value at the first row and the third column).
# From planets_df, select all data on Mars (the fourth row).
# Select and print out the first 5 values in the "diameter" column of planets_df.
# Use the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.
# Select the name column of all planets that have rings.
# Select all columns for planets with rings
planets_df
# Use str() to investigate the structure of the new planets_df variable.
str(planet_df)
# Use str() to investigate the structure of the new planets_df variable.
str(planets_df)
# Use the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.
planets_df <- data.frame(name,type,diameter,rotation,rings)
planets_df
planets_df
planets_df <- data.frame(name,type,diameter,rotation,rings)
# Definition of vectors
name <- c("Mercury", "Venus", "Earth",
"Mars", "Jupiter", "Saturn",
"Uranus", "Neptune")
type <- c("Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet", "Gas giant",
"Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532,
11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03,
0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Use the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.
planets_df <- data.frame(name,type,diameter,rotation,rings)
planets_df
# Use str() to investigate the structure of the new planets_df variable.
str(planets_df)
# From planets_df, select the diameter of Mercury (the value at the first row and the third column).
# From planets_df, select all data on Mars (the fourth row).
# Select and print out the first 5 values in the "diameter" column of planets_df.
# Use the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.
# Select the name column of all planets that have rings.
# Select all columns for planets with rings
View(planets_df)
# From planets_df, select the diameter of Mercury (the value at the first row and the third column).
planets_df[1,3]
# From planets_df, select all data on Mars (the fourth row).
planets[4,]
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,]
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,]
planets_df[4,]
# From planets_df, select the diameter of Mercury (the value at the first row and the third column).
planets_df[1,3]
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,]
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,ALL]
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,All]
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,]
# Definition of vectors
name <- c("Mercury", "Venus", "Earth",
"Mars", "Jupiter", "Saturn",
"Uranus", "Neptune")
type <- c("Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet",
"Terrestrial planet", "Gas giant",
"Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532,
11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03,
0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Use the function data.frame() to construct a data frame. Pass the vectors name, type, diameter, rotation and rings as arguments to data.frame(), in this order. Call the resulting data frame planets_df.
planets_df <- data.frame(name,type,diameter,rotation,rings)
planets_df
# Use str() to investigate the structure of the new planets_df variable.
str(planets_df)
# From planets_df, select the diameter of Mercury (the value at the first row and the third column).
planets_df[1,3]
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,]
# Select and print out the first 5 values in the "diameter" column of planets_df.
# Use the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.
# Select the name column of all planets that have rings.
# Select all columns for planets with rings
# From planets_df, select all data on Mars (the fourth row).
planets_df[4,]
# Select and print out the first 5 values in the "diameter" column of planets_df.
planets_df[1:5, "diameter"]
# Use the $ sign to select the rings variable from planets_df. Store the vector that results as rings_vector.
ring_vector <- planets_df$rings
ring_vector
# Select the name column of all planets that have rings.
subset(planets[1:5,1])
# Select the name column of all planets that have rings.
subset(planets_df[1:5,1])
# Select the name column of all planets that have rings.
planets_df[,1,ring_vector]
# Select the name column of all planets that have rings.
planets_df[all,1,ring_vector]
# Select the name column of all planets that have rings.
with(planets_df, name[ring_vector])
# Select the name column of all planets that have rings.
planets_df[ring_vector,"name"]
# Select the name column of all planets that have rings.
planets_df[ring_vector,"name"]
with(planets_df, name[ring_vector])
# Select the name column of all planets that have rings.
planets_df[ring_vector,"name"]
# Select all columns for planets with rings
substring(planets_df,rings == T)
with(planets_df, name[ring_vector])
# Select all columns for planets with rings
substring(planets_df,rings == T)
# Select all columns for planets with rings
substring(planets_df,rings == TRUE)
# Select all columns for planets with rings
subset(planets_df,rings == TRUE)
with(planets_df, name[ring_vector])
# Select all columns for planets with rings
subset(planets_df,rings == TRUE)
positions <- order(planets_df$diameter)
positions
planets_df[positions,"name"]
# Call order() on planets_df$diameter (the diameter column of planets_df). Store the result as size.
order(a)
# Sort a in an decreasing order
a <- c(100, 10, 1000)
# Call order() on planets_df$diameter (the diameter column of planets_df). Store the result as size.
order(a)
# Use subset() on planets_df to select planets that have a diameter smaller than Earth.
subset(planets_df,subset = diameter < planets_df[3,3])
# Use subset() on planets_df to select planets that have a diameter smaller than Earth.
subset(planets_df,subset = diameter < planets_df[3,3])
planets_df[3,3]
# Use subset() on planets_df to select planets that have a diameter smaller than Earth.
subset(planets_df,subset = diameter < planets_df[3,3])
order(a,rev)
x <- sort(a,decreasing = TRUE)
x
x
x <- order(sort(a,decreasing = TRUE))
x
# Use subset() on planets_df to select planets that have a diameter smaller than Earth.
subset(planets_df,subset = diameter < planets_df[3,3])
x <- order(a,decreasing = TRUE)
#x <- order(sort(a,decreasing = TRUE))
x
a[x]
# Vector with numerics from 1 up to 10
my_vector <- 1:10
# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
# Construct list with these different elements:
# Print out my_list
# Add names to the components. Use for my_vector the name vec, for my_matrix the name mat and for my_df the name df.
# Print out my_list
# The variables mov, act and rev in your R workspace
mov <- "The Shining"
act <- c("Jack Nicholson","Shelley Duvall","Danny Lloyd","Scatman Crothers","Barry Nelson")
rev <- data.frame(scores=c(4.5,4.0,5.0), sources=c("IMDb1","IMDb2","IMDb3"),
comments=c("Best Horror Film I Have Ever Seen",
"A truly brilliant and scary film from Stanley Kubrick",
"A masterpiece of psychological horror"))
# Finish the code to build shining_list. Do not forget to name the list components accordingly (names are moviename, actors and reviews).
# Print out shining_list
# Select from shining_list the vector representing the actors.
# Select from shining_list the second element in the vector representing the actors.
# Finish the code to build shining_list. Do not forget to name the list components accordingly (names are moviename, actors and reviews).
shining_list <- list(moviename = mov, actors = act, reviews = rev)
# Print out shining_list
shining_list
View(shining_list)
# Print out shining_list
shining_list
# Print out shining_list
shining_list
# Select from shining_list the vector representing the actors.
shining_list$actors
View(rev)
# Select from shining_list the vector representing the actors.
shining_list$reviews[1,3]
# Select from shining_list the vector representing the actors.
shining_list$reviews[1:3]
# Select from shining_list the vector representing the actors.
shining_list$reviews[1:3]
# Select from shining_list the vector representing the actors.
shining_list$reviews[1:2]
# Select from shining_list the vector representing the actors.
shining_list$reviews[1:2]
# Select from shining_list the vector representing the actors.
shining_list$reviews[1]
# Select from shining_list the vector representing the actors.
shining_list$reviews[1,]
